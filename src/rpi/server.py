import Adafruit_DHT
import asyncio
import aiohttp
from aiohttp import web
import requests
import json
from datetime import datetime, timedelta
from telegram.ext import Updater, CommandHandler
import logging
from logging.handlers import RotatingFileHandler

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç—á–∏–∫–∞ DHT22
DHT_SENSOR = Adafruit_DHT.DHT22
DHT_PIN = 4  # GPIO4 - –ø—ñ–Ω –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–∞—Ç—á–∏–∫–∞

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –ø–æ–≥–æ–¥–∏
WEATHER_API_KEY = "YOUR_OPENWEATHERMAP_API_KEY"
CITY = "YOUR_CITY"
WEATHER_URL = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={WEATHER_API_KEY}&units=metric&lang=en"  # URL –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
CHAT_ID = "YOUR_CHAT_ID"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
LOG_FILE = "logs/climateguard.log"
LOG_MAX_BYTES = 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ª–æ–≥-—Ñ–∞–π–ª—É: 1 MB
LOG_BACKUP_COUNT = 5  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–µ–∫–∞–ø—ñ–≤ –ª–æ–≥—ñ–≤
logger = logging.getLogger(__name__)  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä–∞
logger.setLevel(logging.DEBUG)  # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª–æ–≥—ñ–≤
handler = RotatingFileHandler(LOG_FILE, maxBytes=LOG_MAX_BYTES, backupCount=LOG_BACKUP_COUNT)  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ—Ç–∞—Ü—ñ—ó –ª–æ–≥—ñ–≤
formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] [%(name)s] - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')  # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
handler.setFormatter(formatter)
logger.addHandler(handler)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
esp_data = {"temperature": None, "humidity": None, "last_update": None}  # –î–∞–Ω—ñ –≤—ñ–¥ ESP8266
rpi_data = {"temperature": None, "humidity": None, "last_update": None}  # –î–∞–Ω—ñ –≤—ñ–¥ Raspberry Pi (DHT22)
avg_data = {"temperature": None, "humidity": None, "temp_error": None, "hum_error": None, "last_update": None}  # –°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –ø–æ—Ö–∏–±–∫–∏
weather_data = "N/A"  # –î–∞–Ω—ñ –ø–æ–≥–æ–¥–∏, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "N/A"
weather_last_update = None  # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏
last_esp_check = datetime.now()  # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ESP8266
first_data_access = True  # –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö

# –ü–æ—Ö–∏–±–∫–∏ –¥–∞—Ç—á–∏–∫—ñ–≤
DHT11_TEMP_ERROR = 2.0  # ¬±2¬∞C –¥–ª—è DHT11
DHT11_HUM_ERROR = 5.0   # ¬±5% –¥–ª—è DHT11
DHT22_TEMP_ERROR = 0.5  # ¬±0.5¬∞C –¥–ª—è DHT22
DHT22_HUM_ERROR = 2.0   # ¬±2% –¥–ª—è DHT22

# –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ –¥–∞—Ç—á–∏–∫–∞ DHT22
async def read_dht22():
    # –°–ø—Ä–æ–±–∞ –∑—á–∏—Ç–∞—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ç–∞ –≤–æ–ª–æ–≥—ñ—Å—Ç—å —ñ–∑ –¥–∞—Ç—á–∏–∫–∞
    humidity, temperature = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)
    if temperature is not None and humidity is not None:
        rpi_data["temperature"] = temperature  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
        rpi_data["humidity"] = humidity  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
        rpi_data["last_update"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É
        logger.info(f"DHT22 sensor data retrieved successfully: temperature={temperature:.1f}¬∞C, humidity={humidity:.1f}%")
    else:
        rpi_data["temperature"] = None  # –°–∫–∏–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        rpi_data["humidity"] = None
        rpi_data["last_update"] = None
        logger.warning("Failed to retrieve data from DHT22 sensor")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏ –∑ OpenWeatherMap
async def fetch_weather():
    global weather_data, weather_last_update
    try:
        response = requests.get(WEATHER_URL)  # –ó–∞–ø–∏—Ç –¥–æ API –ø–æ–≥–æ–¥–∏
        response.raise_for_status()  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ HTTP
        data = response.json()
        if data["cod"] == 200:
            description = data["weather"][0]["description"]
            temp = data["main"]["temp"]
            weather_data = f"{description} {temp:.1f}¬∞C"  # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏
            weather_last_update = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            logger.info(f"Weather data retrieved from OpenWeatherMap: {weather_data}")
        else:
            weather_data = "Weather unavailable"
            weather_last_update = None
            logger.warning(f"Weather API request failed with status code {data['cod']}: {data.get('message', 'No message')}")
    except Exception as e:
        weather_data = "Weather unavailable"
        weather_last_update = None
        logger.error(f"Error fetching weather data from OpenWeatherMap: {str(e)}")

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —Ç–∞ –ø–æ—Ö–∏–±–æ–∫
async def calculate_averages():
    if esp_data["temperature"] is None or rpi_data["temperature"] is None:
        avg_data["temperature"] = None  # –°–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
        avg_data["humidity"] = None
        avg_data["temp_error"] = None
        avg_data["hum_error"] = None
        avg_data["last_update"] = None
        logger.warning("Cannot calculate averages due to missing data from ESP8266 or DHT22")
        if esp_data["temperature"] is None:
            logger.warning("ESP8266 data unavailable, possible disconnection")
        return

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ —Ç–∞ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
    avg_data["temperature"] = (esp_data["temperature"] + rpi_data["temperature"]) / 2
    avg_data["humidity"] = (esp_data["humidity"] + rpi_data["humidity"]) / 2

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–æ—ó –ø–æ—Ö–∏–±–∫–∏ (RMS)
    avg_data["temp_error"] = ((DHT11_TEMP_ERROR**2 + DHT22_TEMP_ERROR**2) ** 0.5) / 2
    avg_data["hum_error"] = ((DHT11_HUM_ERROR**2 + DHT22_HUM_ERROR**2) ** 0.5) / 2
    avg_data["last_update"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"Averages calculated: temperature={avg_data['temperature']:.1f}¬±{avg_data['temp_error']:.1f}¬∞C, humidity={avg_data['humidity']:.1f}¬±{avg_data['hum_error']:.1f}%")

# –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥ ESP8266
async def handle_esp_update(request):
    global esp_data, last_esp_check
    try:
        data = await request.json()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è JSON-–¥–∞–Ω–∏—Ö –≤—ñ–¥ ESP8266
        esp_data["temperature"] = data["temperature"]  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
        esp_data["humidity"] = data["humidity"]  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
        esp_data["last_update"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É
        last_esp_check = datetime.now()
        logger.info(f"ESP8266 data received: temperature={data['temperature']:.1f}¬∞C, humidity={data['humidity']:.1f}%")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
        await calculate_averages()

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ESP8266
        response = {
            "avgTemperature": avg_data["temperature"],
            "avgHumidity": avg_data["humidity"],
            "weather": weather_data
        }
        return web.json_response(response)
    except Exception as e:
        logger.error(f"Error processing ESP8266 update: {str(e)}")
        return web.Response(status=500)

# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ favicon
async def handle_favicon(request):
    logger.debug("Favicon request received")
    return web.Response(status=204)  # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

# API-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
async def get_data(request):
    global first_data_access
    if first_data_access:
        logger.info("Data endpoint accessed for the first time")
        first_data_access = False
    return web.json_response({
        "weather": weather_data,
        "weather_last_update": weather_last_update,
        "esp_temp": esp_data["temperature"],
        "esp_hum": esp_data["humidity"],
        "esp_last_update": esp_data["last_update"],
        "rpi_temp": rpi_data["temperature"],
        "rpi_hum": rpi_data["humidity"],
        "rpi_last_update": rpi_data["last_update"],
        "avg_temp": avg_data["temperature"],
        "avg_hum": avg_data["humidity"],
        "temp_error": avg_data["temp_error"],
        "hum_error": avg_data["hum_error"],
        "avg_last_update": avg_data["last_update"]
    })

# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ styles.css
async def handle_styles(request):
    logger.debug("Styles.css file requested")
    with open("styles.css", "r") as f:
        return web.Response(text=f.read(), content_type="text/css")

# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async def handle_web(request):
    logger.debug("Web interface requested")
    with open("index.html", "r") as f:
        return web.Response(text=f.read(), content_type="text/html")

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start Telegram –±–æ—Ç–∞
def start(update, context):
    logger.info("Telegram bot received /start command")
    update.message.reply_text(
        "üå± Welcome to ClimateGuard Bot! üå°Ô∏è\n"
        "Your friendly companion for real-time climate monitoring! üå¶Ô∏è\n"
        "Stay updated with temperature, humidity, and weather forecasts from Chernihiv! ü§ñ\n"
        "Click the buttons below to explore the environment around you! üåç\n\n"
        "üìå Available Commands:\n"
        "üå°Ô∏è /weather - Check the current weather\n"
        "üìä /average - View averaged sensor data\n"
        "üì° /esp - Get ESP8266 (DHT11) readings\n"
        "üåê /rpi - Get Raspberry Pi (DHT22) readings"
    )

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /weather Telegram –±–æ—Ç–∞
def weather(update, context):
    logger.info("Telegram bot received /weather command")
    update.message.reply_text(
        f"üå§Ô∏è Weather in Chernihiv:\n"
        f"üå°Ô∏è {weather_data}\n"
        f"‚è∞ Last updated: {weather_last_update or 'N/A'}"
    )

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /average Telegram –±–æ—Ç–∞
def average(update, context):
    logger.info("Telegram bot received /average command")
    if avg_data["temperature"] is None:
        update.message.reply_text("üì° Average data unavailable - ESP8266 might be offline! ‚ö†Ô∏è")
    else:
        update.message.reply_text(
            f"üìà Average Climate Data:\n"
            f"üå°Ô∏è Temperature: {avg_data['temperature']:.1f} ¬± {avg_data['temp_error']:.1f} ¬∞C\n"
            f"üíß Humidity: {avg_data['humidity']:.1f} ¬± {avg_data['hum_error']:.1f} %\n"
            f"‚è∞ Last updated: {avg_data['last_update']}"
        )

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /esp Telegram –±–æ—Ç–∞
def esp(update, context):
    logger.info("Telegram bot received /esp command")
    if esp_data["temperature"] is None:
        update.message.reply_text("üì° ESP8266 offline - Check the connection! ‚ö†Ô∏è")
    else:
        update.message.reply_text(
            f"üì° ESP8266 (DHT11) Data:\n"
            f"üå°Ô∏è Temperature: {esp_data['temperature']:.1f} ¬∞C\n"
            f"üíß Humidity: {esp_data['humidity']:.1f} %\n"
            f"‚è∞ Last updated: {esp_data['last_update']}"
        )

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /rpi Telegram –±–æ—Ç–∞
def rpi(update, context):
    logger.info("Telegram bot received /rpi command")
    update.message.reply_text(
        f"üåê Raspberry Pi (DHT22) Data:\n"
        f"üå°Ô∏è Temperature: {rpi_data['temperature']:.1f} ¬∞C\n"
        f"üíß Humidity: {rpi_data['humidity']:.1f} %\n"
        f"‚è∞ Last updated: {rpi_data['last_update'] or 'N/A'}"
    )

# –†–µ–≥—É–ª—è—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É ESP8266
async def check_esp_status(updater):
    global esp_data, last_esp_check
    while True:
        await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
        current_time = datetime.now()
        if esp_data["last_update"] is None or (current_time - datetime.strptime(esp_data["last_update"], "%Y-%m-%d %H:%M:%S")) > timedelta(minutes=1):
            logger.warning("ESP8266 not responding, resetting data to None")
            esp_data["temperature"] = None  # –°–∫–∏–¥–∞–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω—å
            esp_data["humidity"] = None  # –°–∫–∏–¥–∞–Ω–Ω—è –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
            esp_data["last_update"] = None  # –°–∫–∏–¥–∞–Ω–Ω—è —á–∞—Å—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            updater.bot.send_message(chat_id=CHAT_ID, text="‚ö†Ô∏è ClimateGuard Alert: üì° ESP8266 not responding! Check the connection!")
            last_esp_check = current_time
        else:
            logger.debug("ESP8266 status check successful")

# –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏
async def main():
    logger.info("Starting ClimateGuard application")
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    app.router.add_post('/update', handle_esp_update)
    app.router.add_get('/', handle_web)
    app.router.add_get('/data', get_data)
    app.router.add_get('/styles.css', handle_styles)
    app.router.add_get('/favicon.ico', handle_favicon)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 80)
    await site.start()
    logger.info("Web server started on 0.0.0.0:80")

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –±–æ—Ç–∞
    logger.info("Starting ClimateGuard Telegram Bot")
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("weather", weather))
    dp.add_handler(CommandHandler("average", average))
    dp.add_handler(CommandHandler("esp", esp))
    dp.add_handler(CommandHandler("rpi", rpi))
    updater.start_polling()
    logger.info("ClimateGuard Telegram Bot polling started")

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É ESP8266
    asyncio.create_task(check_esp_status(updater))

    # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    while True:
        await read_dht22()  # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ DHT22
        await fetch_weather()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏
        await calculate_averages()  # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
        await asyncio.sleep(10)  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª—É