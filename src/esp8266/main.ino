#include <ESP8266HTTPClient.h>    // –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Raspberry Pi
#include <ESPAsyncWebServer.h>    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
#include <DHT.h>                  // –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞—Ç—á–∏–∫–æ–º DHT11
#include <Adafruit_SSD1306.h>     // –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è OLED-–¥–∏—Å–ø–ª–µ—î–º
#include <ArduinoJson.h>          // –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ JSON-–¥–∞–Ω–∏—Ö

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Wi-Fi
const char* ssid = "YOUR_SSID";
const char* password = "YOUR_PASSWORD";

// –°—Ç–∞—Ç–∏—á–Ω–∞ IP-–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
IPAddress staticIP(192, 168, 0, 51);
IPAddress gateway(192, 168, 0, 1);
IPAddress subnet(255, 255, 255, 0);

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞ Raspberry Pi
const char* raspberryPiHost = "192.168.0.50";  // IP-–∞–¥—Ä–µ—Å–∞ Raspberry Pi
const int raspberryPiPort = 80;                // –ü–æ—Ä—Ç –¥–ª—è HTTP-–∑'—î–¥–Ω–∞–Ω–Ω—è

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç—á–∏–∫–∞ DHT11
#define DHTPIN 5           // –ü—ñ–Ω –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è DHT11 (D1)
#define DHTTYPE DHT11      // –¢–∏–ø –¥–∞—Ç—á–∏–∫–∞ (DHT11)
DHT dht(DHTPIN, DHTTYPE);  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞—Ç—á–∏–∫–∞

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OLED-–¥–∏—Å–ø–ª–µ—è
#define SCREEN_WIDTH 128   // –®–∏—Ä–∏–Ω–∞ –µ–∫—Ä–∞–Ω–∞ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
#define SCREEN_HEIGHT 64   // –í–∏—Å–æ—Ç–∞ –µ–∫—Ä–∞–Ω–∞ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C // I2C-–∞–¥—Ä–µ—Å–∞ OLED
#define OLED_SDA 14
#define OLED_SCL 12

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OLED
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

float t = 0.0;                    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
float h = 0.0;                    // –í–æ–ª–æ–≥—ñ—Å—Ç—å
float avgT = 0.0;                 // –°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
float avgH = 0.0;                 // –°–µ—Ä–µ–¥–Ω—è –≤–æ–ª–æ–≥—ñ—Å—Ç—å
String weather = "N/A";           // –ü–æ–≥–æ–¥–∞
bool serverActive = false;        // –°—Ç–∞—Ç—É—Å –∑–≤‚Äô—è–∑–∫—É –∑ Raspberry Pi
unsigned long previousMillis = 0; // –ß–∞—Å –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
const long interval = 10000;      // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (10 —Å–µ–∫—É–Ω–¥)

AsyncWebServer server(80);        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 80

String localIP;                   // –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó IP-–∞–¥—Ä–µ—Å–∏

// HTML-–∫–æ–¥ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html { font-family: Arial, sans-serif; background: #111; color: #eee; text-align: center; }
    h2 { font-size: 2rem; margin-top: 20px; }
    p { font-size: 1.5rem; margin: 10px; }
    .label { font-weight: bold; }
    .units { font-size: 1.2rem; color: #ccc; }
    .data { font-size: 2.2rem; color: #00ffcc; }
    .icon { font-size: 2rem; margin-right: 10px; }
    .footer { font-size: 0.9rem; color: #888; margin-top: 20px; }
  </style>
</head>
<body>
  <h2>ESP8266 DHT11 Monitor</h2>
  <h3>Minimal backup interface</h3>
  <p><span class="icon">üå°Ô∏è</span><span class="label">Temperature:</span>
    <span id="temperature" class="data">%TEMPERATURE%</span>
    <span class="units">¬∞C</span>
  </p>
  <p><span class="icon">üíß</span><span class="label">Humidity:</span>
    <span id="humidity" class="data">%HUMIDITY%</span>
    <span class="units">%</span>
  </p>
<script>
setInterval(() => {
  fetch("/temperature").then(res => res.text()).then(data => {
    document.getElementById("temperature").textContent = data;
  });
  fetch("/humidity").then(res => res.text()).then(data => {
    document.getElementById("humidity").textContent = data;
  });
}, 10000);
</script>
</body>
</html>)rawliteral";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–º—ñ–Ω–Ω–∏—Ö —É HTML
String processor(const String& var) {
  if (var == "TEMPERATURE") return String(t, 1); // –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∑ 1 –∑–Ω–∞–∫–æ–º –ø—ñ—Å–ª—è –∫–æ–º–∏
  if (var == "HUMIDITY") return String(h, 1);    // –ü–æ–≤–µ—Ä—Ç–∞—î –≤–æ–ª–æ–≥—ñ—Å—Ç—å –∑ 1 –∑–Ω–∞–∫–æ–º –ø—ñ—Å–ª—è –∫–æ–º–∏
  return String();
}

// –§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
void setup() {
  Serial.begin(115200);           // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –ø–æ—Ä—Ç—É –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
  dht.begin();                    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞—Ç—á–∏–∫–∞ DHT11
  Wire.begin(OLED_SDA, OLED_SCL); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è I2C –¥–ª—è OLED

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println("OLED initialization failed!"); // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    while (true);                                  // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è, —è–∫—â–æ OLED –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
  }
  display.clearDisplay();              // –û—á–∏—â–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω–∞
  display.setTextColor(SSD1306_WHITE); // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—ñ–ª–æ–≥–æ –∫–æ–ª—å–æ—Ä—É —Ç–µ–∫—Å—Ç—É
  display.setTextSize(1);              // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ç–µ–∫—Å—Ç—É
  display.setCursor(0, 0);             // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å–æ—Ä—É –≤ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
  display.println("Starting...");
  display.display();                   // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω–∞
  delay(1000);                         // –ó–∞—Ç—Ä–∏–º–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Wi-Fi –∑—ñ —Å—Ç–∞—Ç–∏—á–Ω–æ—é IP-–∞–¥—Ä–µ—Å–æ—é
  WiFi.config(staticIP, gateway, subnet); // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ—ó IP
  WiFi.begin(ssid, password);             // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wi-Fi
  Serial.print("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);        // –ó–∞—Ç—Ä–∏–º–∫–∞ 0.5 —Å–µ–∫—É–Ω–¥–∏
    Serial.print(".");
  }
  localIP = WiFi.localIP().toString();           // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏
  Serial.println("\nConnected! IP: " + localIP); // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—à–ª—è—Ö—ñ–≤
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *req) {
    req->send_P(200, "text/html", index_html, processor); // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ HTML-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
  });
  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *req) {
    String temp = String(t, 1);         // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
    req->send(200, "text/plain", temp); // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
  });
  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *req) {
    String hum = String(h, 1);         // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
    req->send(200, "text/plain", hum); // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
  });
  server.begin(); // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
}

// –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö –Ω–∞ Raspberry Pi
void sendDataToRaspberryPi() {
  WiFiClient client;             // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è HTTP
  HTTPClient http;               // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è HTTP-–∫–ª—ñ—î–Ω—Ç–∞

  String url = "http://" + String(raspberryPiHost) + ":" + String(raspberryPiPort) + "/update"; // URL –¥–ª—è POST-–∑–∞–ø–∏—Ç—É
  http.begin(client, url); // –ü–æ—á–∞—Ç–æ–∫ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è
  http.addHeader("Content-Type", "application/json"); // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ JSON

  StaticJsonDocument<200> doc; // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON-–¥–æ–∫—É–º–µ–Ω—Ç–∞
  doc["temperature"] = t;      // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
  doc["humidity"] = h;         // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
  String payload;              // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  serializeJson(doc, payload); // –°–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è JSON —É —Ä—è–¥–æ–∫

  int httpCode = http.POST(payload);        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø–∏—Ç—É
  if (httpCode == HTTP_CODE_OK) {           // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    String response = http.getString();     // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    StaticJsonDocument<200> responseDoc;
    deserializeJson(responseDoc, response); // –î–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

    avgT = responseDoc["avgTemperature"];          // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
    avgH = responseDoc["avgHumidity"];             // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
    weather = responseDoc["weather"].as<String>(); // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
    serverActive = true;
  } else {
    serverActive = false;
    Serial.println("Failed to connect to Raspberry Pi: " + String(httpCode));
  }
  http.end(); // –ó–∞–∫—Ä–∏—Ç—Ç—è –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è
}

// –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
void loop() {
  unsigned long currentMillis = millis();           // –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
  if (currentMillis - previousMillis >= interval) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    previousMillis = currentMillis;                 // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É

    // –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –¥–∞—Ç—á–∏–∫–∞ DHT11
    float newT = dht.readTemperature(); // –ß–∏—Ç–∞–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
    float newH = dht.readHumidity();    // –ß–∏—Ç–∞–Ω–Ω—è –≤–æ–ª–æ–≥–æ—Å—Ç—ñ

    if (!isnan(newT)) t = newT; // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏, —è–∫—â–æ –¥–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ
    if (!isnan(newH)) h = newH; // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–æ–ª–æ–≥–æ—Å—Ç—ñ, —è–∫—â–æ –¥–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –Ω–∞ Raspberry Pi
    if (WiFi.status() == WL_CONNECTED) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wi-Fi
      sendDataToRaspberryPi();           // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    } else {
      serverActive = false;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è OLED-–¥–∏—Å–ø–ª–µ—è
    display.clearDisplay();  // –û—á–∏—â–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω–∞
    display.setTextSize(1);  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ç–µ–∫—Å—Ç—É
    display.setCursor(0, 0); // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å–æ—Ä—É

    if (isnan(t) || isnan(h)) {
      display.println("Sensor Error");
    } else if (!serverActive) {       // –†–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –∑–≤‚Äô—è–∑–∫—É
      display.println("RPi Offline"); // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ñ–ª–∞–π–Ω Raspberry Pi
      display.print("T:");
      display.print(t, 1);
      display.println("C");
      display.print("H:");
      display.print(h, 1);
      display.println("%");
    } else { // –†–µ–∂–∏–º –æ–Ω–ª–∞–π–Ω
      display.print("Avg T:");
      display.print(avgT, 1);
      display.println("C");
      display.print("Avg H:");
      display.print(avgH, 1);
      display.println("%");
      display.println("Weather:");
      display.println(weather);
    }

    // –í–∏–≤–µ–¥–µ–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏ –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω–∞
    display.setTextSize(1);
    display.setCursor(0, SCREEN_HEIGHT - 8); // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å–æ—Ä—É –≤–Ω–∏–∑—É
    display.print("IP:");
    display.print(localIP);

    display.display(); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω–∞
    Serial.printf("Temp: %.1f C | Hum: %.1f %% | Avg T: %.1f | Avg H: %.1f | Weather: %s\n",
                  t, h, avgT, avgH, weather.c_str()); // –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É Serial
  }
}